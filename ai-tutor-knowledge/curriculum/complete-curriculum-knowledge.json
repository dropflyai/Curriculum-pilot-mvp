{
  "curriculum_overview": {
    "course_name": "CodeFly 9th Grade Python Programming",
    "total_duration_minutes": 270,
    "total_lessons": 5,
    "difficulty_progression": "Beginner → Intermediate",
    "target_age": "14-15 years (9th grade)",
    "learning_philosophy": "Interactive, project-based learning with real-world applications",
    "key_methodology": "ASK → STORE → THINK → RESPOND pattern for programming logic"
  },
  
  "complete_lesson_breakdown": {
    "lesson_1_python_basics": {
      "id": "1",
      "title": "Python Basics: Variables and Input/Output",
      "duration_minutes": 60,
      "difficulty": "beginner",
      "xp_reward": 200,
      "week": 1,
      
      "learning_objectives": [
        "Understand variables as data containers",
        "Use assignment operator to store values",
        "Create interactive programs with input/output",
        "Apply proper Python syntax and naming conventions",
        "Debug basic syntax and name errors"
      ],
      
      "critical_concepts": {
        "variables": {
          "definition": "Containers that store data for later use",
          "analogy": "Like contacts in your phone - store information with a name to find it later",
          "syntax": "variable_name = value",
          "naming_rules": ["snake_case", "descriptive names", "no spaces or special characters", "case sensitive"]
        },
        "print_function": {
          "purpose": "Display information to the user",
          "analogy": "Like sending a text message - sharing information with someone",
          "syntax": "print('message')",
          "common_uses": ["Show results", "Display greetings", "Debug program flow"]
        },
        "input_function": {
          "purpose": "Collect information from the user",
          "analogy": "Like a drive-thru - computer asks a question, user responds",
          "syntax": "variable = input('prompt')",
          "important_note": "Always returns a string, even if user types numbers"
        }
      },
      
      "real_world_applications": [
        "Creating account registration forms",
        "Building calculators and converters",
        "Making interactive games and quizzes",
        "Collecting survey responses"
      ],
      
      "common_errors": {
        "NameError": {
          "cause": "Using a variable before defining it or misspelling variable names",
          "solution": "Check spelling and make sure variable is created before use",
          "example": "print(nme) when you meant print(name)"
        },
        "SyntaxError": {
          "cause": "Missing quotes around strings or incorrect syntax",
          "solution": "Check for matching quotes and proper function syntax",
          "example": "print(Hello) should be print('Hello')"
        }
      },
      
      "quiz_concepts": [
        "Variable assignment and naming",
        "String vs number data types",
        "Input/output function usage",
        "Error identification and correction"
      ],
      
      "success_indicators": [
        "Create variables with meaningful names",
        "Use print and input functions correctly",
        "Understand program flow from input to output",
        "Debug basic syntax errors independently"
      ]
    },
    
    "lesson_2_magic_8_ball": {
      "id": "2",
      "title": "Project: Magic 8-Ball Game",
      "duration_minutes": 60,
      "difficulty": "beginner",
      "xp_reward": 250,
      "week": 2,
      
      "learning_objectives": [
        "Import and use Python modules",
        "Create and manipulate lists",
        "Generate random selections from data",
        "Build complete interactive programs",
        "Apply programming concepts in practical projects"
      ],
      
      "critical_concepts": {
        "imports": {
          "purpose": "Use pre-built code from Python libraries",
          "syntax": "import module_name",
          "random_module": "Provides functions for generating random numbers and choices"
        },
        "lists": {
          "definition": "Ordered collections of items",
          "syntax": "my_list = ['item1', 'item2', 'item3']",
          "characteristics": ["Use square brackets", "Separate items with commas", "Can store different data types"]
        },
        "random_choice": {
          "purpose": "Pick a random item from a list",
          "syntax": "random.choice(list_name)",
          "use_case": "Creating unpredictable responses in games"
        }
      },
      
      "project_structure": {
        "step_1": "Import random module",
        "step_2": "Create list of possible responses",
        "step_3": "Ask user for their question",
        "step_4": "Generate random response",
        "step_5": "Display the fortune with user's question"
      },
      
      "real_world_connections": [
        "Game development fundamentals",
        "Random number generation in applications",
        "List-based data management",
        "User interface design principles"
      ],
      
      "extension_possibilities": [
        "Add more fortune responses",
        "Create themed fortune tellers",
        "Track fortune history",
        "Add ASCII art decorations"
      ],
      
      "assessment_criteria": [
        "Correct import statement usage",
        "Proper list creation and syntax",
        "Functional random selection",
        "Complete interactive user experience",
        "Creative personalization elements"
      ]
    },
    
    "lesson_3_functions": {
      "id": "3", 
      "title": "Functions and Parameters",
      "duration_minutes": 60,
      "difficulty": "intermediate",
      "xp_reward": 300,
      "week": 3,
      
      "learning_objectives": [
        "Define reusable functions with parameters",
        "Understand parameter vs argument distinction",
        "Use return values effectively",
        "Organize code for better structure",
        "Apply DRY principle in programming"
      ],
      
      "critical_concepts": {
        "function_definition": {
          "purpose": "Create reusable blocks of code",
          "syntax": "def function_name(parameters):",
          "key_parts": ["def keyword", "function name", "parameters in parentheses", "colon", "indented body"]
        },
        "parameters_and_arguments": {
          "parameters": "Placeholders in function definition",
          "arguments": "Actual values passed when calling function",
          "example": "def greet(name): # name is parameter\ngreet('Alice') # 'Alice' is argument"
        },
        "return_statement": {
          "purpose": "Send data back from function to caller",
          "syntax": "return value",
          "usage": "result = my_function() # result gets returned value"
        },
        "scope": {
          "local_variables": "Created inside functions, only accessible within that function",
          "global_variables": "Created outside functions, accessible everywhere",
          "best_practice": "Prefer parameters over global variables"
        }
      },
      
      "programming_principles": {
        "DRY": "Don't Repeat Yourself - write code once, use many times",
        "abstraction": "Break complex problems into smaller, manageable pieces",
        "modularity": "Organize code into logical, reusable components"
      },
      
      "common_patterns": [
        "Input validation functions",
        "Calculation functions",
        "Display formatting functions", 
        "Game logic functions"
      ],
      
      "debugging_focus": [
        "Missing colon after function definition",
        "Incorrect indentation in function body",
        "Calling function with wrong number of arguments",
        "Forgetting return statement when value needed"
      ]
    },
    
    "lesson_4_lists_loops": {
      "id": "4",
      "title": "Lists and Loops", 
      "duration_minutes": 50,
      "difficulty": "intermediate",
      "xp_reward": 350,
      "week": 4,
      
      "learning_objectives": [
        "Access and modify list elements by index",
        "Use for loops to iterate through data",
        "Apply list methods for data manipulation",
        "Process multiple items automatically",
        "Combine lists and loops for powerful programs"
      ],
      
      "critical_concepts": {
        "list_indexing": {
          "zero_based": "First item is at index 0, second at index 1, etc.",
          "syntax": "my_list[index]",
          "negative_indexing": "my_list[-1] gets last item, my_list[-2] gets second to last"
        },
        "list_methods": {
          "append": "Add item to end of list",
          "remove": "Remove first occurrence of item",
          "pop": "Remove and return item at specific index",
          "len": "Get number of items in list"
        },
        "for_loops": {
          "purpose": "Repeat actions for each item in a collection",
          "syntax": "for item in list:",
          "loop_variable": "Temporary variable representing current item",
          "indentation": "Loop body must be indented consistently"
        },
        "range_function": {
          "purpose": "Generate sequences of numbers",
          "syntax": "range(start, stop, step)",
          "common_use": "for i in range(10): # repeats 10 times"
        }
      },
      
      "data_processing_patterns": [
        "Sum all numbers in a list",
        "Find maximum/minimum values",
        "Count items meeting certain criteria",
        "Transform each item in a list",
        "Filter items based on conditions"
      ],
      
      "real_world_applications": [
        "Processing student grades",
        "Analyzing sales data",
        "Managing inventory systems",
        "Creating multiplication tables",
        "Generating reports from data"
      ],
      
      "error_prevention": [
        "Check list length before accessing indices",
        "Understand range() excludes the stop value",
        "Ensure consistent indentation in loops",
        "Test with empty lists and single items"
      ]
    },
    
    "lesson_5_file_io": {
      "id": "5",
      "title": "File Input and Output",
      "duration_minutes": 40, 
      "difficulty": "intermediate",
      "xp_reward": 300,
      "week": 5,
      
      "learning_objectives": [
        "Open and close files safely",
        "Read data from existing files",
        "Write program output to files",
        "Understand data persistence concepts",
        "Handle file-related errors gracefully"
      ],
      
      "critical_concepts": {
        "file_modes": {
          "read": "'r' - open file for reading only",
          "write": "'w' - open file for writing (overwrites existing)",
          "append": "'a' - open file for adding to end"
        },
        "with_statement": {
          "purpose": "Safely handle files with automatic closing",
          "syntax": "with open('filename', 'mode') as file:",
          "benefit": "File automatically closes even if error occurs"
        },
        "file_methods": {
          "read": "file.read() - get entire file content as string",
          "write": "file.write(text) - add text to file",
          "readlines": "file.readlines() - get list of all lines"
        },
        "data_persistence": {
          "concept": "Information survives after program ends",
          "applications": ["Save game progress", "Store user preferences", "Log program activity"]
        }
      },
      
      "practical_applications": [
        "High score tracking in games",
        "Configuration file management",
        "Data logging and analysis",
        "Backup and restore functionality",
        "Report generation"
      ],
      
      "best_practices": [
        "Always use 'with' statements for file handling",
        "Check if file exists before reading",
        "Handle file permissions and access errors",
        "Use descriptive filenames",
        "Consider file locations and paths"
      ],
      
      "common_file_errors": [
        "FileNotFoundError - trying to read non-existent file",
        "PermissionError - insufficient access rights",
        "IOError - general input/output problems"
      ]
    }
  },
  
  "skill_progression_map": {
    "foundational_skills": {
      "lesson_1": ["Variables", "Input/Output", "Basic syntax"],
      "prerequisites": "None - complete beginner friendly"
    },
    "intermediate_skills": {
      "lesson_2": ["Modules", "Lists", "Random generation"],
      "lesson_3": ["Functions", "Parameters", "Return values"],
      "lesson_4": ["List manipulation", "Iteration", "Data processing"],
      "lesson_5": ["File operations", "Data persistence"],
      "prerequisites": "Must understand variables and basic syntax"
    },
    "mastery_indicators": {
      "beginner_complete": "Can create simple interactive programs with input/output",
      "intermediate_complete": "Can build complex programs with functions, loops, and file handling"
    }
  },
  
  "assessment_framework": {
    "quiz_distribution": {
      "concept_understanding": "40% - theoretical knowledge",
      "code_reading": "30% - interpret existing code", 
      "error_identification": "20% - debug common mistakes",
      "application": "10% - apply concepts to new situations"
    },
    "coding_challenges": {
      "scaffolded_hints": "Progressive support after failed attempts",
      "auto_testing": "Immediate feedback on code execution",
      "solution_reveal": "Complete solutions after multiple attempts"
    },
    "progress_tracking": {
      "completion_criteria": "All sections completed, quiz passed (70%+), code challenges solved",
      "xp_rewards": "Based on difficulty and completion speed",
      "badge_system": "Recognition for specific achievements"
    }
  },
  
  "common_error_patterns": {
    "syntax_errors": {
      "missing_colon": "Forgot : after function definition or if statement",
      "unmatched_quotes": "Started string with ' but ended with \"",
      "missing_parentheses": "Forgot () when calling functions"
    },
    "name_errors": {
      "undefined_variable": "Using variable before creating it",
      "typos": "Misspelling variable or function names",
      "case_sensitivity": "Python distinguishes between Name and name"
    },
    "type_errors": {
      "string_math": "Trying to do math with text",
      "function_calls": "Calling something that isn't a function"
    },
    "indentation_errors": {
      "inconsistent_spacing": "Mixing tabs and spaces",
      "missing_indentation": "Code that should be indented isn't",
      "extra_indentation": "Too much indentation where not needed"
    }
  },
  
  "engagement_strategies": {
    "real_world_connections": [
      "Variables like phone contacts",
      "Input like drive-thru ordering", 
      "Print like text messaging",
      "Functions like app features",
      "Lists like playlists",
      "Loops like repetitive tasks"
    ],
    "age_appropriate_examples": [
      "Social media apps and features",
      "Gaming and entertainment",
      "School and academic scenarios",
      "Teen interests and hobbies"
    ],
    "gamification_elements": [
      "XP points for lesson completion",
      "Badges for specific achievements",
      "Progress tracking and streaks",
      "Celebration animations for success"
    ]
  },
  
  "intervention_triggers": {
    "immediate_help": {
      "syntax_error_repeated": "Same syntax mistake 3+ times",
      "stuck_on_concept": "No progress for 5+ minutes on single problem"
    },
    "progressive_support": {
      "hint_level_1": "Gentle nudge toward solution approach",
      "hint_level_2": "More specific guidance on syntax or logic", 
      "hint_level_3": "Step-by-step breakdown of solution",
      "solution_reveal": "Complete answer with explanation"
    },
    "teacher_escalation": {
      "extended_struggle": "Stuck on same lesson for 20+ minutes",
      "repeated_failures": "Multiple failed attempts across different concepts",
      "disengagement_signs": "Long periods of inactivity or minimal progress"
    }
  },
  
  "success_metrics": {
    "individual_student": {
      "completion_rate": "Percentage of lessons finished",
      "quiz_performance": "Average quiz scores across all lessons",
      "time_efficiency": "Average time per lesson vs expected duration",
      "error_reduction": "Decrease in common mistakes over time"
    },
    "class_level": {
      "engagement": "Active participation and lesson progression",
      "mastery": "Students meeting learning objectives",
      "support_needs": "Frequency of teacher interventions required"
    }
  }
}