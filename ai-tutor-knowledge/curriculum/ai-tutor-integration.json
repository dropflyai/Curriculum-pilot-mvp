{
  "ai_tutor_curriculum_integration": {
    "contextual_understanding": {
      "lesson_progress_indicators": {
        "lesson_1": {
          "key_concepts": ["variables", "print", "input"],
          "typical_confusion_points": ["syntax errors", "variable naming", "string vs number"],
          "success_signals": ["creates variables correctly", "uses functions properly", "understands data types"],
          "intervention_triggers": ["repeated NameError", "syntax confusion", "stuck on input/output pattern"]
        },
        "lesson_2": {
          "key_concepts": ["imports", "lists", "random selection"],
          "typical_confusion_points": ["import syntax", "list creation", "random.choice usage"],
          "success_signals": ["successful module import", "proper list syntax", "working random selection"],
          "intervention_triggers": ["import errors", "list syntax mistakes", "random function confusion"]
        },
        "lesson_3": {
          "key_concepts": ["function definition", "parameters", "return values"],
          "typical_confusion_points": ["parameter vs argument", "indentation", "return statement"],
          "success_signals": ["defines functions correctly", "passes arguments properly", "uses return values"],
          "intervention_triggers": ["function definition errors", "parameter confusion", "return statement missing"]
        },
        "lesson_4": {
          "key_concepts": ["list indexing", "for loops", "iteration"],
          "typical_confusion_points": ["zero-based indexing", "loop indentation", "loop variable scope"],
          "success_signals": ["accesses list items correctly", "writes proper loops", "processes data effectively"],
          "intervention_triggers": ["IndexError frequent", "loop indentation issues", "iteration confusion"]
        },
        "lesson_5": {
          "key_concepts": ["file operations", "with statements", "data persistence"],
          "typical_confusion_points": ["file modes", "path understanding", "error handling"],
          "success_signals": ["opens files safely", "reads/writes correctly", "handles errors gracefully"],
          "intervention_triggers": ["file handling errors", "path confusion", "mode selection mistakes"]
        }
      }
    },
    
    "adaptive_response_framework": {
      "context_awareness_factors": [
        "current_lesson_progress",
        "time_spent_on_current_problem",
        "recent_error_patterns", 
        "quiz_performance_history",
        "overall_engagement_level",
        "learning_pathway_position"
      ],
      
      "response_adaptation_rules": {
        "first_time_concept": {
          "approach": "gentle_introduction",
          "tone": "encouraging_and_patient",
          "detail_level": "comprehensive_with_analogies",
          "examples": "real_world_connections"
        },
        "struggling_with_concept": {
          "approach": "progressive_hints",
          "tone": "supportive_and_reassuring", 
          "detail_level": "step_by_step_breakdown",
          "examples": "simplified_versions_first"
        },
        "repeated_same_error": {
          "approach": "targeted_correction",
          "tone": "focused_but_kind",
          "detail_level": "specific_error_explanation",
          "examples": "common_mistake_patterns"
        },
        "advanced_quickly": {
          "approach": "challenge_extension",
          "tone": "excited_and_motivating",
          "detail_level": "deeper_concepts",
          "examples": "complex_applications"
        }
      }
    },
    
    "intelligent_hint_system": {
      "hint_progression_levels": {
        "level_1_nudge": {
          "purpose": "Gentle direction without giving away solution",
          "examples": [
            "Think about what type of data this variable should store",
            "Remember the pattern we learned: input → process → output",
            "What happens when we call a function without the right number of arguments?"
          ]
        },
        "level_2_guidance": {
          "purpose": "More specific direction toward solution approach",
          "examples": [
            "This looks like a syntax error - check your quotation marks",
            "Functions need parameters in parentheses, even if empty: ()",
            "Lists use square brackets and commas to separate items"
          ]
        },
        "level_3_detailed": {
          "purpose": "Step-by-step breakdown of solution approach",
          "examples": [
            "Step 1: Create a variable to store the user's input\nStep 2: Use the input() function with a clear prompt\nStep 3: Print the result using the variable name",
            "To fix this NameError: 1) Check the spelling of your variable, 2) Make sure you created it before using it, 3) Remember Python is case-sensitive"
          ]
        },
        "level_4_solution": {
          "purpose": "Complete solution with educational explanation",
          "examples": [
            "Here's the correct code with explanation:\nname = input('What is your name? ')\nprint('Hello, ' + name)\n\nThis works because: input() gets user data and stores it in 'name', then print() displays it back"
          ]
        }
      },
      
      "hint_timing_logic": {
        "immediate_help": "Critical syntax errors or complete confusion",
        "after_30_seconds": "Student seems stuck but might work it out",
        "after_2_minutes": "Extended struggle, provide more direct guidance", 
        "after_5_minutes": "Significant difficulty, step-by-step support needed"
      }
    },
    
    "error_pattern_recognition": {
      "syntax_error_patterns": {
        "missing_quotes": {
          "regex_pattern": "NameError.*not defined",
          "likely_cause": "String without quotes treated as variable",
          "ai_response": "It looks like you're missing quotes around text. In Python, text needs to be wrapped in quotes like 'hello' or \"hello\" so Python knows it's a string, not a variable name.",
          "follow_up_action": "Show correct syntax example"
        },
        "missing_colon": {
          "regex_pattern": "SyntaxError.*invalid syntax.*:",
          "likely_cause": "Missing colon after function definition or control structure",
          "ai_response": "Python needs a colon (:) at the end of function definitions, if statements, and loops. It's like Python's way of saying 'here comes the code block!'",
          "follow_up_action": "Highlight where colon should go"
        },
        "indentation_error": {
          "regex_pattern": "IndentationError",
          "likely_cause": "Incorrect indentation in Python code",
          "ai_response": "Python uses indentation (spaces) to understand which code belongs together. Think of it like organizing your essay with paragraphs - related code needs to be lined up the same way.",
          "follow_up_action": "Show proper indentation example"
        }
      },
      
      "conceptual_error_patterns": {
        "variable_before_definition": {
          "pattern": "NameError.*name.*is not defined",
          "concept_issue": "Using variable before creating it",
          "ai_response": "You're trying to use a variable before you've created it! It's like trying to call someone whose number you haven't saved in your phone yet. Create the variable first, then use it.",
          "teaching_moment": "Review variable creation and assignment"
        },
        "function_call_syntax": {
          "pattern": "TypeError.*takes.*positional argument",
          "concept_issue": "Wrong number of arguments to function",
          "ai_response": "This function expects a different number of inputs than you're giving it. It's like ordering food - the restaurant needs to know exactly what you want!",
          "teaching_moment": "Review function calls and parameters"
        }
      }
    },
    
    "progress_tracking_integration": {
      "learning_analytics": {
        "concept_mastery_indicators": {
          "variables": ["successful variable creation", "appropriate naming", "correct usage in expressions"],
          "functions": ["proper definition syntax", "correct parameter usage", "appropriate return statements"],
          "lists": ["correct syntax", "successful indexing", "proper method usage"],
          "loops": ["correct indentation", "proper iteration", "effective data processing"],
          "files": ["safe file opening", "successful read/write", "proper error handling"]
        },
        
        "struggle_identification": {
          "time_based": "Spending excessive time on single problem",
          "error_based": "Repeated same mistakes multiple times",
          "pattern_based": "Consistent confusion on related concepts",
          "engagement_based": "Decreased participation or interaction"
        }
      },
      
      "adaptive_pacing": {
        "accelerated_learners": {
          "identification": "Fast completion + high accuracy",
          "adaptations": ["Additional challenges", "Extension problems", "Peer tutoring opportunities"],
          "ai_responses": "You're doing great! Ready for an extra challenge?"
        },
        "standard_learners": {
          "identification": "On-pace completion + good understanding",
          "adaptations": ["Regular reinforcement", "Standard progression", "Celebration of milestones"],
          "ai_responses": "Nice work! Let's keep building on this success."
        },
        "supported_learners": {
          "identification": "Slower pace + needs additional help",
          "adaptations": ["Extended time", "Additional examples", "Simplified explanations"],
          "ai_responses": "You're making great progress! Let's take this step by step."
        }
      }
    },
    
    "communication_templates": {
      "encouragement_messages": [
        "You're getting the hang of this! Programming takes practice, and you're building those skills.",
        "That's a great question! It shows you're thinking deeply about how Python works.",
        "Don't worry about making mistakes - that's how programmers learn! Even experienced coders debug constantly.",
        "You just solved a tricky problem! That kind of problem-solving is what makes great programmers."
      ],
      
      "concept_reinforcement": [
        "Remember, variables are like labeled boxes that store information for us to use later.",
        "Functions are your programming superpowers - write the code once, use it many times!",
        "Lists are perfect for when you have multiple related items to keep track of.",
        "Loops let the computer do the boring repetitive work so you don't have to!"
      ],
      
      "error_support": [
        "Error messages are Python's way of trying to help you! They're not mean, just very specific about what went wrong.",
        "Every programmer sees these error messages constantly. You're learning to speak Python's language!",
        "The best way to get better at debugging is practice - and you're getting lots of great practice right now!"
      ],
      
      "progress_celebration": [
        "Look how much you've learned! You went from basic variables to building complete programs!",
        "You're not just learning Python - you're learning to think like a programmer!",
        "Each lesson builds on the previous ones, and you can see how it all connects now!"
      ]
    },
    
    "escalation_protocols": {
      "teacher_intervention_needed": {
        "triggers": [
          "Student stuck on same problem for 15+ minutes despite hints",
          "Multiple consecutive failures on fundamental concepts", 
          "Signs of frustration or disengagement",
          "Requesting human help directly"
        ],
        "handoff_information": [
          "Current lesson and specific problem",
          "Error patterns and hint history",
          "Student's recent progress and performance",
          "Suggested intervention approach"
        ]
      },
      
      "peer_support_opportunities": {
        "triggers": [
          "Student would benefit from explaining to others",
          "Student needs different explanation style",
          "Student showing leadership potential"
        ],
        "facilitation": [
          "Connect with classmates at similar level",
          "Structure helpful peer interactions",
          "Guide collaborative problem-solving"
        ]
      }
    },
    
    "assessment_integration": {
      "formative_assessment": {
        "real_time_feedback": "Immediate response to code execution and errors",
        "concept_checking": "Quick questions to verify understanding",
        "progress_monitoring": "Continuous tracking of skill development"
      },
      
      "summative_assessment": {
        "quiz_support": "Contextual help during assessment without giving answers",
        "project_guidance": "Scaffolding for complex multi-concept projects",
        "reflection_prompts": "Help students articulate their learning"
      }
    }
  }
}